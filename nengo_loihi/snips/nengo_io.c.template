#include <stdlib.h>
#include <string.h>
#include "nengo_io.h"

#define N_OUTPUTS %d
#define N_ERRORS %d


void nengo_io(runState *s) {

    if (s->time %% 100 == 0) {
        printf("time %%d\n", s->time);
    }

    int count[1];
    readChannel(getChannelID("nengo_io_h2c"), count, 1);
    //printf("count %%d\n", count[0]);

    int spike[2];
    for (int i=0; i<count[0]; i++) {
        readChannel(getChannelID("nengo_io_h2c"), spike, 2);
        //printf("send spike %%d.%%d\n", spike[0], spike[1]);
        CoreId coreId = (CoreId) {.id=spike[0]};
        nx_send_discrete_spike(s->time, coreId, spike[1]);
    }

    //Communicate with learning snip
    //assumes only 1 core is learning
    //userData is [N_errors, core, errors...]
    int error[N_ERRORS+1];
    s->userData[0] = N_ERRORS;
    readChannel(getChannelID("nengo_io_h2c"), error, N_ERRORS+1);
    //printf("send error %%d.%%d,%%d\n", error[0], error[1], error[2]);
    s->userData[1] = error[0];
    for (int i=0; i<N_ERRORS; i++) {
        s->userData[i+2] = error[i+1];
    }

    int output[N_OUTPUTS];
    output[0] = s->time;

%s
%s
    writeChannel(getChannelID("nengo_io_c2h"), output, N_OUTPUTS);

}
